{"version":3,"sources":["components/Todo/Todo.tsx","components/TodoList/TodoList.tsx","helpers_api.ts","index.tsx","App.tsx"],"names":["Todo","todo","user","title","completed","className","name","TodoList","todosList","map","key","id","API_URL","getData","url","a","fetch","response","json","getPreparedTodos","todos","users","preparedTodos","find","person","userId","ReactDOM","render","useState","setTodos","isLoading","setIsLoading","isLoaded","setLoaded","selectedSort","setSelectedSort","showedAllTodos","todosFromApi","sortedTodos","useMemo","sort","aTodo","bTodo","localeCompare","Number","value","onChange","event","typeOfSort","target","disabled","type","onClick","document","getElementById"],"mappings":"iOASaA,G,KAAkB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACxBC,EAA2BD,EAA3BC,KAAMC,EAAqBF,EAArBE,MAAOC,EAAcH,EAAdG,UAErB,OACE,4BACGF,GAAS,wBAAIG,UAAU,eAAeH,EAAKI,MAC5C,wBAAID,UAAU,2BAA2BF,GACzC,wBAAIE,UAAU,qCAAqCD,EAAY,OAAS,eCRjEG,EAAsB,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OACjC,oCACGA,EAAUC,KAAI,SAAAR,GAAI,OAAI,kBAAC,EAAD,CAAMS,IAAKT,EAAKU,GAAIV,KAAMA,S,OCR/CW,EAAU,wCAEHC,EAAO,uCAAG,WAAUC,GAAV,eAAAC,EAAA,sEACEC,MAAMF,GADR,cACfG,EADe,yBAGdA,EAASC,QAHK,2CAAH,sDAcPC,EAAgB,uCAAG,gCAAAJ,EAAA,sEAPvBF,EAAO,UAAYD,EAAZ,UAOgB,cACxBQ,EADwB,gBAHvBP,EAAO,UAAYD,EAAZ,UAGgB,cAExBS,EAFwB,OAGxBC,EAAgCF,EAAMX,KAAI,SAAAR,GAAI,sBAC/CA,EAD+C,CAElDC,KAAMmB,EAAME,MAAK,SAAAC,GAAM,OAAIA,EAAOb,KAAOV,EAAKwB,eALlB,kBAOvBH,GAPuB,2CAAH,qDCd7BI,IAASC,OACP,mBCCqB,WAAO,IAAD,EACDC,mBAAyB,IADxB,mBACpBR,EADoB,KACbS,EADa,OAEOD,oBAAS,GAFhB,mBAEpBE,EAFoB,KAETC,EAFS,OAGGH,oBAAS,GAHZ,mBAGpBI,EAHoB,KAGVC,EAHU,OAIaL,mBAAS,UAJtB,mBAIpBM,EAJoB,KAINC,EAJM,KAMrBC,EAAc,uCAAG,4BAAArB,EAAA,6DACrBgB,GAAa,GADQ,SAGMZ,IAHN,OAGfkB,EAHe,OAKrBR,EAASQ,GACTN,GAAa,GACbE,GAAU,GAPW,2CAAH,qDAgBdK,EAAcC,mBAAQ,WAC1B,MAAwB,YAAjBL,EAAA,YACGd,GACJ,YAAIA,GAAOoB,MAAK,SAACC,EAAOC,GACxB,OAAOR,GACL,IAAK,QACH,OAAOO,EAAMtC,MAAMwC,cAAcD,EAAMvC,OACzC,IAAK,OACH,OAAOsC,EAAMvC,MAAQwC,EAAMxC,KAAOuC,EAAMvC,KAAKI,KAAKqC,cAAcD,EAAMxC,KAAKI,MAAQ,EACrF,IAAK,YACH,OAAOsC,OAAOH,EAAMrC,WAAawC,OAAOF,EAAMtC,WAChD,QACA,OAAO,QAId,CAACgB,EAAOc,IAGX,OAAIJ,EAEA,uBAAGzB,UAAU,WAAb,cAOF,yBAAKA,UAAU,OACb,wBAAIA,UAAU,SAAd,yBAEG2B,EAgBG,oCACE,4BAAQa,MAAOX,EACbY,SAtDC,SAACC,GAAiD,IAChDC,EAAeD,EAAME,OAA5BJ,MACRV,EAAgBa,IAqDJ3C,UAAU,mBAEV,4BAAQ6C,UAAQ,EAACL,MAAM,UAAvB,sBACA,4BAAQA,MAAM,WAAd,gBACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,aAAd,cAEF,2BAAOxC,UAAU,SACf,+BACE,wBAAIA,UAAU,gBACZ,wBAAIA,UAAU,eAAd,QACA,wBAAIA,UAAU,eAAd,QACA,wBAAIA,UAAU,eAAd,YAGJ,+BACE,kBAAC,EAAD,CAAUG,UAAW8B,OAlC3B,oCACE,uBAAGjC,UAAU,mBAAb,mBAGA,4BACE8C,KAAK,SACL9C,UAAU,iBACV+C,QAAShB,GAHX,YD5DZ,MACAiB,SAASC,eAAe,U","file":"static/js/main.da6d3572.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { PreparedTodo } from '../../types';\n\nimport '../../App.css';\n\ninterface Props {\n  todo: PreparedTodo\n}\n\nexport const Todo: FC<Props> = ({ todo }) => {\n  const { user, title, completed } = todo;\n\n  return (\n    <tr>\n      {user && (<td className=\"table__cell\">{user.name}</td>)}\n      <td className=\"table__cell table__cell\">{title}</td>\n      <td className=\"table__cell table__cell-completed\">{completed ? 'Done' : 'Don\\'t do'}</td>\n    </tr>\n  );\n}\n","import React, { FC } from 'react';\nimport { PreparedTodo } from '../../types';\nimport { Todo } from '../Todo/Todo';\n\ninterface Props {\n  todosList: PreparedTodo[]\n}\n\nexport const TodoList: FC<Props> = ({ todosList }) => (\n  <>\n    {todosList.map(todo => <Todo key={todo.id} todo={todo} />)}\n  </>\n);\n","import { User, Todo, PreparedTodo } from './types';\n\nconst API_URL = 'https://jsonplaceholder.typicode.com/';\n\nexport const getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n\n  return response.json();\n}\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return getData<Todo[]>(`${API_URL}todos`);\n};\n\nexport const getUsers = (): Promise<User[]> => {\n  return getData<User[]>(`${API_URL}users`);\n};\n\nexport const getPreparedTodos = async (): Promise<PreparedTodo[]> => {\n  const todos: Todo[] = await getTodos();\n  const users: User[] = await getUsers();\n  const preparedTodos: PreparedTodo[] = todos.map(todo => ({\n    ...todo,\n    user: users.find(person => person.id === todo.userId),\n  }));\n  return preparedTodos;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n","import React, { useState, FC, useMemo } from 'react';\nimport { PreparedTodo } from './types';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { getPreparedTodos } from './helpers_api'\nimport './App.css';\n\nexport const App: FC = () => {\n  const [todos, setTodos] = useState<PreparedTodo[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoaded, setLoaded] = useState(false);\n  const [selectedSort, setSelectedSort] = useState('choose');\n\n  const showedAllTodos = async () => {\n    setIsLoading(true);\n\n    const todosFromApi = await getPreparedTodos();\n\n    setTodos(todosFromApi);\n    setIsLoading(false);\n    setLoaded(true);\n\n  }\n\n  const sorted = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value: typeOfSort } = event.target;\n    setSelectedSort(typeOfSort);\n  }\n\n  const sortedTodos = useMemo(() => {\n    return selectedSort === 'initual'\n        ? [...todos]\n        : [...todos].sort((aTodo, bTodo) => {\n          switch(selectedSort) {\n            case 'title':\n              return aTodo.title.localeCompare(bTodo.title);\n            case 'name':\n              return aTodo.user && bTodo.user ? aTodo.user.name.localeCompare(bTodo.user.name) : 0;\n            case 'completed':\n              return Number(aTodo.completed) - Number(bTodo.completed);\n            default:\n            return 0;\n          }\n        })\n\n  }, [todos, selectedSort]);\n\n\n  if (isLoading) {\n    return (\n      <p className=\"loading\">\n      Loading...\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"title\">Dynamic list of TODOs</h1>\n      {(\n        !isLoaded\n        ? (\n            <>\n              <p className=\"initual_loading\">\n                Load your Todos\n              </p>\n              <button\n                type=\"button\"\n                className=\"loading_button\"\n                onClick={showedAllTodos}\n              >\n                Load\n              </button>\n            </>\n           )\n          : (\n            <>\n              <select value={selectedSort}\n                onChange={sorted}\n                className=\"selected_button\"\n              >\n                <option disabled value='choose'>Choose sort method</option>\n                <option value='initual'>Initual view</option>\n                <option value='title'>Title</option>\n                <option value='name'>Name</option>\n                <option value='completed'>Completed</option>\n              </select>\n              <table className=\"table\">\n                <thead>\n                  <tr className=\"table__title\">\n                    <th className=\"table__cell\">User</th>\n                    <th className=\"table__cell\">Todo</th>\n                    <th className=\"table__cell\">Status</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <TodoList todosList={sortedTodos} />\n                </tbody>\n              </table>\n            </>\n          )\n        )}\n      </div>\n    )\n  };\n"],"sourceRoot":""}