{"version":3,"sources":["components/Todo/Todo.tsx","components/TodoList/TodoList.tsx","users_&_todos_from_server_api.ts","index.tsx","App.tsx"],"names":["Todo","todo","user","title","completed","className","name","TodoList","todosList","map","key","id","API_URL","getData","url","a","fetch","response","json","getPreparedTodos","todos","users","preparedTodos","find","person","userId","ReactDOM","render","useState","setTodos","isLoading","setIsLoading","selectedSort","setSelectedSort","showedAllTodos","todosFromApi","sortedTodos","sort","aTodo","bTodo","localeCompare","Number","length","type","onClick","value","onChange","event","typeOfSort","target","disabled","document","getElementById"],"mappings":"iOASaA,G,KAAkB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACxBC,EAA2BD,EAA3BC,KAAMC,EAAqBF,EAArBE,MAAOC,EAAcH,EAAdG,UAErB,OACE,4BACGF,GAAS,wBAAIG,UAAU,eAAeH,EAAKI,MAC5C,wBAAID,UAAU,2BAA2BF,GACzC,wBAAIE,UAAU,qCAAqCD,EAAY,OAAS,eCRjEG,EAAsB,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OACjC,oCACGA,EAAUC,KAAI,SAAAR,GAAI,OAAI,kBAAC,EAAD,CAAMS,IAAKT,EAAKU,GAAIV,KAAMA,S,OCR/CW,EAAU,wCAEHC,EAAO,uCAAG,WAAUC,GAAV,eAAAC,EAAA,sEACEC,MAAMF,GADR,cACfG,EADe,yBAGdA,EAASC,QAHK,2CAAH,sDAcPC,EAAgB,uCAAG,gCAAAJ,EAAA,sEAPvBF,EAAO,UAAYD,EAAZ,UAOgB,cACxBQ,EADwB,gBAHvBP,EAAO,UAAYD,EAAZ,UAGgB,cAExBS,EAFwB,OAGxBC,EAA+BF,EAAMX,KAAI,SAAAR,GAAI,sBAC9CA,EAD8C,CAEjDC,KAAMmB,EAAME,MAAK,SAAAC,GAAM,OAAIA,EAAOb,KAAOV,EAAKwB,eALlB,kBAOvBH,GAPuB,2CAAH,qDCd7BI,IAASC,OACP,mBCC2B,WAAO,IAAD,EACPC,mBAAwB,IADjB,mBAC1BR,EAD0B,KACnBS,EADmB,OAECD,oBAAkB,GAFnB,mBAE1BE,EAF0B,KAEfC,EAFe,OAGOH,mBAAiB,UAHxB,mBAG1BI,EAH0B,KAGZC,EAHY,KAK3BC,EAAc,uCAAG,4BAAAnB,EAAA,6DACrBgB,GAAa,GADQ,SAGMZ,IAHN,OAGfgB,EAHe,OAKrBN,EAASM,GACTJ,GAAa,GANQ,2CAAH,qDAcdK,EAA+B,YAAjBJ,EAAA,YACZZ,GACJ,YAAIA,GAAOiB,MAAK,SAACC,EAAOC,GACxB,OAAOP,GACL,IAAK,QACH,OAAOM,EAAMnC,MAAMqC,cAAcD,EAAMpC,OACzC,IAAK,OACH,OAAOmC,EAAMpC,MAAQqC,EAAMrC,KAAOoC,EAAMpC,KAAKI,KAAKkC,cAAcD,EAAMrC,KAAKI,MAAQ,EACrF,IAAK,YACH,OAAOmC,OAAOH,EAAMlC,WAAaqC,OAAOF,EAAMnC,WAChD,QACA,OAAO,MAIb,OAAI0B,EAEA,uBAAGzB,UAAU,WAAb,cAOF,yBAAKA,UAAU,OACb,wBAAIA,UAAU,SAAd,yBAEmB,IAAjBe,EAAMsB,OAEF,oCACE,uBAAGrC,UAAU,mBAAb,mBAGA,4BACEsC,KAAK,SACLtC,UAAU,iBACVuC,QAASV,GAHX,SAUF,oCACE,4BAAQW,MAAOb,EACbc,SAlDC,SAACC,GAAiD,IAChDC,EAAeD,EAAME,OAA5BJ,MACRZ,EAAgBe,IAiDJ3C,UAAU,mBAEV,4BAAQ6C,UAAQ,EAACL,MAAM,UAAvB,sBACA,4BAAQA,MAAM,WAAd,gBACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,aAAd,cAEF,2BAAOxC,UAAU,SACf,+BACE,wBAAIA,UAAU,gBACZ,wBAAIA,UAAU,eAAd,QACA,wBAAIA,UAAU,eAAd,QACA,wBAAIA,UAAU,eAAd,YAGJ,+BACE,kBAAC,EAAD,CAAUG,UAAW4B,UDnFrC,MACAe,SAASC,eAAe,U","file":"static/js/main.6f9b169a.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { PreparedTodo } from '../../types';\n\nimport '../../App.css';\n\ninterface Props {\n  todo: PreparedTodo\n}\n\nexport const Todo: FC<Props> = ({ todo }) => {\n  const { user, title, completed } = todo;\n\n  return (\n    <tr>\n      {user && (<td className=\"table__cell\">{user.name}</td>)}\n      <td className=\"table__cell table__cell\">{title}</td>\n      <td className=\"table__cell table__cell-completed\">{completed ? 'Done' : 'Don\\'t do'}</td>\n    </tr>\n  );\n}\n","import React, { FC } from 'react';\nimport { PreparedTodos } from '../../types';\nimport { Todo } from '../Todo/Todo';\n\ninterface Props {\n  todosList: PreparedTodos\n}\n\nexport const TodoList: FC<Props> = ({ todosList }) => (\n  <>\n    {todosList.map(todo => <Todo key={todo.id} todo={todo} />)}\n  </>\n);\n","import { User,Users, Todo, Todos, PreparedTodos } from './types';\n\nconst API_URL = 'https://jsonplaceholder.typicode.com/';\n\nexport const getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n\n  return response.json();\n}\n\nexport const getTodos = () => {\n  return getData<Todo[]>(`${API_URL}todos`);\n};\n\nexport const getUsers = () => {\n  return getData<User[]>(`${API_URL}users`);\n};\n\nexport const getPreparedTodos = async (): Promise<PreparedTodos> => {\n  const todos: Todos = await getTodos();\n  const users: Users = await getUsers();\n  const preparedTodos: PreparedTodos = todos.map(todo => ({\n    ...todo,\n    user: users.find(person => person.id === todo.userId),\n  }));\n  return preparedTodos;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n","import React, { useState } from 'react';\nimport { PreparedTodos } from './types';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { getPreparedTodos } from './users_&_todos_from_server_api'\nimport './App.css';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<PreparedTodos>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [selectedSort, setSelectedSort] = useState<string>('choose');\n\n  const showedAllTodos = async () => {\n    setIsLoading(true);\n\n    const todosFromApi = await getPreparedTodos();\n\n    setTodos(todosFromApi);\n    setIsLoading(false)\n  }\n\n  const sorted = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value: typeOfSort } = event.target;\n    setSelectedSort(typeOfSort);\n  }\n\n  const sortedTodos = selectedSort === 'initual'\n    ? [...todos]\n    : [...todos].sort((aTodo, bTodo) => {\n      switch(selectedSort) {\n        case 'title':\n          return aTodo.title.localeCompare(bTodo.title);\n        case 'name':\n          return aTodo.user && bTodo.user ? aTodo.user.name.localeCompare(bTodo.user.name) : 0;\n        case 'completed':\n          return Number(aTodo.completed) - Number(bTodo.completed);\n        default:\n        return 0;\n      }\n    });\n\n  if (isLoading) {\n    return (\n      <p className=\"loading\">\n      Loading...\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"title\">Dynamic list of TODOs</h1>\n      {(\n        todos.length === 0\n        ? (\n            <>\n              <p className=\"initual_loading\">\n                Load your Todos\n              </p>\n              <button\n                type=\"button\"\n                className=\"loading_button\"\n                onClick={showedAllTodos}\n              >\n                Load\n              </button>\n            </>\n           )\n          : (\n            <>\n              <select value={selectedSort}\n                onChange={sorted}\n                className=\"selected_button\"\n              >\n                <option disabled value='choose'>Choose sort method</option>\n                <option value='initual'>Initual view</option>\n                <option value='title'>Title</option>\n                <option value='name'>Name</option>\n                <option value='completed'>Completed</option>\n              </select>\n              <table className=\"table\">\n                <thead>\n                  <tr className=\"table__title\">\n                    <th className=\"table__cell\">User</th>\n                    <th className=\"table__cell\">Todo</th>\n                    <th className=\"table__cell\">Status</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <TodoList todosList={sortedTodos} />\n                </tbody>\n              </table>\n            </>\n          )\n        )}\n      </div>\n    )\n  };\n"],"sourceRoot":""}